name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Turbo (optional - for remote caching)
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  
  # Database (for testing)
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aristocrat_test
  
  # Auth (dummy values for testing)
  BETTER_AUTH_SECRET: test-secret-key-for-ci-only
  BETTER_AUTH_URL: http://localhost:3000
  CORS_ORIGIN: http://localhost:3001

jobs:
  # Job 1: Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      bun-cache-hit: ${{ steps.bun-cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.15

      - name: Cache Bun dependencies
        id: bun-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

  # Job 2: Type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.15

      - name: Restore Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.bun-cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Run type checking
        run: bun run check-types

  # Job 3: Build applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        app: [server, website]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.15

      - name: Restore Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.bun-cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ matrix.app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ matrix.app }}-

      - name: Build ${{ matrix.app }}
        run: bun run build --filter=@aristocrat/${{ matrix.app }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: |
            apps/${{ matrix.app }}/dist
            apps/${{ matrix.app }}/.next
          retention-days: 7

  # Job 4: Database integration tests
  database-tests:
    name: Database Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aristocrat_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.15

      - name: Restore Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.bun-cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aristocrat_test
        run: |
          echo "üóÑÔ∏è Testing database connection..."
          cd apps/server
          
          echo "üóÑÔ∏è Running database migrations..."
          bun run db:push

      - name: Verify database schema
        run: |
          cd apps/server
          bun run --eval "
            import { db } from './src/db/index.ts';
            console.log('‚úÖ Database connection successful');
            process.exit(0);
          "
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aristocrat_test

  # Job 5: Security and dependency audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.15

      - name: Restore Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.bun-cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit
        continue-on-error: true

      - name: Check for vulnerable dependencies
        run: |
          echo "üîç Checking for known vulnerabilities..."
          # Add custom security checks here if needed
          echo "‚úÖ Security audit completed"

  # Job 6: Build validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [type-check, build, database-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Validate build outputs
        run: |
          echo "üîç Validating build artifacts..."
          
          # Check server build
          if [ -d "apps/server/dist" ]; then
            echo "‚úÖ Server build found"
            ls -la apps/server/dist/
          else
            echo "‚ùå Server build missing"
            exit 1
          fi
          
          # Check website build
          if [ -d "apps/website/.next" ]; then
            echo "‚úÖ Website build found"
            ls -la apps/website/.next/
          else
            echo "‚ùå Website build missing"
            exit 1
          fi

  # Job 7: Performance benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.15

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Run bundle analysis
        run: |
          echo "üìä Analyzing bundle sizes..."
          
          # Website bundle analysis
          if [ -f "apps/website/.next/build-manifest.json" ]; then
            echo "üì¶ Next.js bundle analysis:"
            du -sh apps/website/.next/static/ || echo "No static files found"
          fi
          
          # Server bundle analysis
          if [ -d "apps/server/dist" ]; then
            echo "üóÉÔ∏è Server bundle size:"
            du -sh apps/server/dist/ || echo "No server dist found"
          fi

      - name: Comment bundle size
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üìä Bundle Analysis
            
            Build completed successfully! 
            
            - ‚úÖ Type checking passed
            - ‚úÖ All applications built successfully
            - ‚úÖ Database tests passed
            
            View the full CI report above for detailed information.`
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })

  # Final job: CI Summary
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [type-check, build, database-tests, security-audit, build-validation]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.type-check.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.database-tests.result }}" != "success" ]] || \
             [[ "${{ needs.build-validation.result }}" != "success" ]]; then
            echo "‚ùå CI failed - check the logs above"
            exit 1
          else
            echo "‚úÖ All CI checks passed successfully!"
          fi

      - name: Report Success
        if: success()
        run: |
          echo "üéâ Aristocrat CI completed successfully!"
          echo "üì¶ All builds are ready for deployment"
          echo "üöÄ Ready for release workflow when tagged"
